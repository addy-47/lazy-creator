common cmds
cd .\lazy-creator\frontend; npm run dev
cd .\lazy-creator\backend; python -m  app.main
cd .\lazy-creator;mongod --dbpath "E:\MongoDBData"

# Lazy Creator App Deployment Roadmap

# PART 1: GCP CLOUD DEPLOYMENT

## Overview
- Backend: Python Flask API → Google Cloud Run
- Frontend: React SPA → Google Cloud Run (instead of App Engine)
- Database: MongoDB → MongoDB Atlas with VPC peering to GCP
- Domain: lazycreator.in (GoDaddy)

## 1. Prerequisites and External Setups Before Code Changes

### GCP Setup
- GCP Account set up with billing enabled
- gcloud CLI installed and configured
- Docker installed locally
- GitHub/GitLab repository for CI/CD (optional)

### Service Account Permissions
The existing service account with these permissions is sufficient:
- roles/cloudbuild.builds.builder
- roles/containerregistry.ServiceAgent
- roles/iam.serviceAccountUser
- roles/logging.logWriter
- roles/monitoring.metricWriter
- roles/run.admin
- roles/secretmanager.admin
- roles/storage.admin

### Domain Setup in GoDaddy
1. Login to GoDaddy account
2. Navigate to lazycreator.in DNS settings
3. Add the following DNS records:
   - A record: @ → will point to GCP load balancer IP (to be obtained later)
   - CNAME record: www → lazycreator.in
   - TXT record: @ → value provided by Google domain verification (to be obtained)

### Database Setup (MongoDB Atlas)
1. Create MongoDB Atlas account
2. Create a new project and deploy a MongoDB cluster (M10 or higher for production)
3. Configure network access:
   - Whitelist GCP IP ranges
   - Set up VPC peering between MongoDB Atlas and your GCP project
4. Create database user with proper access rights
5. Obtain MongoDB connection string (has been added to the .env file)

## 2. Code Changes for Production

The following code changes have been made for production deployment:

### Backend Changes:
1. Updated CORS configurations to handle production domains
2. Enhanced storage_helper.py to better support Cloud Run environment
3. Updated Dockerfile for production deployment
4. Added proper environment variable handling

### Frontend Changes:
1. Created Dockerfile for building and serving the frontend
2. Created Nginx configuration for serving the SPA
3. Updated API URL configuration to switch between dev and prod environments

## 3. Deployment Steps

### Step 1: Build and Deploy Backend

First, build and deploy the backend to Cloud Run:

```bash
# Navigate to backend directory
cd backend

# Build the Docker image
gcloud builds submit --tag gcr.io/[PROJECT_ID]/lazy-creator-backend

# Deploy to Cloud Run
gcloud run deploy backend \
  --image gcr.io/[PROJECT_ID]/lazy-creator-backend \
  --platform managed \
  --allow-unauthenticated \
  --memory 2Gi \
  --cpu 2 \
  --region [REGION] \
  --set-env-vars="DEBUG=False,FRONTEND_URL=https://lazycreator.in" \
  --update-secrets="MONGODB_URI=mongodb-uri:latest,NEWS_API_KEY=news-api-key:latest,PEXELS_API_KEY=pexels-api-key:latest,PIXABAY_API_KEY=pixabay-api-key:latest" \
  --service-account=[SERVICE_ACCOUNT_EMAIL]
```

Once deployed, note the URL of your backend service (e.g., `https://backend-xyz123.run.app`). You'll need this for the frontend deployment.

### Step 2: Build and Deploy Frontend

Next, build and deploy the frontend to Cloud Run:

```bash
# Navigate to frontend directory
cd frontend

# Build the Docker image
gcloud builds submit --tag gcr.io/[PROJECT_ID]/lazy-creator-frontend

# Deploy to Cloud Run
gcloud run deploy frontend \
  --image gcr.io/[PROJECT_ID]/lazy-creator-frontend \
  --platform managed \
  --allow-unauthenticated \
  --memory 1Gi \
  --region [REGION] \
  --service-account=[SERVICE_ACCOUNT_EMAIL]
```

### Step 3: Set Up Load Balancer and Domain

Follow these steps to set up a global HTTPS load balancer for your domain:

1. Create load balancer:
   ```bash
   gcloud compute addresses create lazy-creator-ip --global
   gcloud compute addresses describe lazy-creator-ip --global --format="get(address)"
   ```

2. Create HTTPS certificate:
   ```bash
   gcloud compute ssl-certificates create lazycreator-cert \
     --domains=lazycreator.in,www.lazycreator.in
   ```

3. Set up HTTPS load balancer with Cloud Run backend:
   ```bash
   # Create backend service for the *frontend* Cloud Run service
   gcloud compute backend-services create lb-frontend-backend-service \
     --global \
     --load-balancing-scheme=EXTERNAL

   # Create NEG (Network Endpoint Group) for the *frontend* Cloud Run service
   gcloud compute network-endpoint-groups create lb-frontend-neg \
     --region=[REGION] \
     --network-endpoint-type=SERVERLESS \
     --cloud-run-service=frontend # This links the NEG to your frontend Cloud Run service

   # Add the *frontend* NEG as a backend to the *frontend* backend service
   gcloud compute backend-services add-backend lb-frontend-backend-service \
     --global \
     --network-endpoint-group=lb-frontend-neg \
     --network-endpoint-group-region=[REGION]

   # Create backend service for the *backend* Cloud Run service
   gcloud compute backend-services create lb-backend-backend-service \
     --global \
     --load-balancing-scheme=EXTERNAL

   # Create NEG for the *backend* Cloud Run service
   gcloud compute network-endpoint-groups create lb-backend-neg \
     --region=[REGION] \
     --network-endpoint-type=SERVERLESS \
     --cloud-run-service=backend # This links the NEG to your backend Cloud Run service

   # Add the *backend* NEG as a backend to the *backend* backend service
   gcloud compute backend-services add-backend lb-backend-backend-service \
     --global \
     --network-endpoint-group=lb-backend-neg \
     --network-endpoint-group-region=[REGION]

   # Create URL map - Default traffic goes to the frontend service
   gcloud compute url-maps create lazy-creator-url-map \
     --default-service=lb-frontend-backend-service # Default traffic goes to the frontend service

   # Create path matcher to route /api/* to the backend service
   gcloud compute url-maps add-path-matcher lazy-creator-url-map \
     --path-matcher-name=api-paths \
     --default-service=lb-frontend-backend-service \ # Other paths also go to frontend
     --backend-service-path-rules="/api/*=lb-backend-backend-service" # Route /api/* to the backend service

   # Create HTTPS proxy
   gcloud compute target-https-proxies create lazy-creator-https-proxy \
     --url-map=lazy-creator-url-map \
     --ssl-certificates=lazycreator-cert

   # Create forwarding rule
   gcloud compute forwarding-rules create lazy-creator-https-rule \
     --global \
     --target-https-proxy=lazy-creator-https-proxy \
     --address=lazy-creator-ip \
     --ports=443
   ```

4. Update GoDaddy DNS:
   - **A Record:** `@` points to the IP address obtained from `gcloud compute addresses describe lazy-creator-ip --global --format="get(address)"`
   - **CNAME Record:** `www` points to `lazycreator.in`
   - **TXT Record:** `@` with the value provided by Google for domain verification (if needed during certificate setup)

### Step 4: Verify Deployment

1. Test the application via the domain name:
   ```
   https://lazycreator.in
   ```

2. Verify API access (should now be routed by the load balancer):
   ```
   https://lazycreator.in/api/health
   ```

3. Monitor logs to ensure everything is working properly:
   ```bash
   gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=frontend"
   gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=backend"
   ```

## 5. Monitoring and Maintenance

1. Set up Cloud Monitoring:
   ```
   gcloud monitoring dashboards create --config-from-file=dashboard.json
   ```

2. Configure alerts for backend errors:
   ```
   gcloud alpha monitoring channels create --display-name="Email Alerts" --type=email --email-address=you@example.com
   ```

3. Set up budget alerts:
   ```
   gcloud billing budgets create --billing-account=[BILLING_ACCOUNT_ID] \
     --display-name="Monthly Budget" \
     --budget-amount=500 \
     --threshold-rule=percent=80,basis=current-spend
   ```

### Important Notes for Production Deployment:

1. **Environment Variables**: Ensure all sensitive values are stored in Secret Manager instead of directly in environment variables.

2. **Domain Propagation**: DNS changes can take 24-48 hours to fully propagate.

3. **SSL Certificate**: The certificate might take some time to provision, especially if using a managed certificate.

4. **MongoDB Access**: Ensure your MongoDB Atlas cluster allows access from your GCP VPC and Cloud Run services.

5. **Recovery Plan**: Have a backup and recovery plan in place before switching to production.

# PART 2: MOBILE APP DEPLOYMENT (FUTURE)

## Overview
- Mobile Framework: React Native
- Distribution: Google Play Store and Apple App Store
- Backend: Same GCP Cloud Run backend used by web app
- Authentication: OAuth 2.0 with Google, Apple, and email/password

## 1. Prerequisites and External Setups Before Code Changes

### Development Environment
- Install Node.js and npm/yarn
- Setup React Native development environment:
  - Install Android Studio for Android development
  - Install Xcode for iOS development (requires macOS)
  - Setup Java Development Kit (JDK)

### External Account Setup
1. Google Play Developer Account ($25 one-time fee)
2. Apple Developer Account ($99/year)
3. Firebase Project (for authentication, analytics, and crash reporting)
4. App Store Connect account (iOS)

### Certificates and Keys
1. Android:
   - Generate keystore file for signing Android APK
   - Register app in Google Play Console
   - Set up Google Play App Signing

2. iOS:
   - Generate App Store certificates from Apple Developer account
   - Create App ID in Apple Developer account
   - Set up provisioning profiles

## 2. Mobile App Code Implementation

### Core Requirements
1. React Native project with TypeScript
2. Authentication with Firebase
3. Integration with backend API
4. Offline capabilities
5. Push notification support

### Project Setup
```
npx react-native init LazyCreatorApp --template react-native-template-typescript
cd LazyCreatorApp
npm install @react-navigation/native @react-navigation/stack
npm install react-native-reanimated react-native-gesture-handler
npm install firebase @react-native-firebase/app @react-native-firebase/auth
npm install @react-native-async-storage/async-storage
npm install react-native-dotenv
npm install @react-native-community/netinfo
```

### Environment Configuration
Create `.env.development` and `.env.production` files:
```
# .env.development
API_URL=http://localhost:5000/api

# .env.production
API_URL=https://backend.lazycreator.in/api
```

### API Integration
```typescript
// api.ts
import { API_URL } from '@env';

interface APIOptions {
  endpoint: string;
  method?: string;
  data?: any;
  token?: string;
}

export async function callAPI({ endpoint, method = 'GET', data, token }: APIOptions) {
  const headers: HeadersInit = {
    'Content-Type': 'application/json'
  };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const config: RequestInit = {
    method,
    headers,
    body: data ? JSON.stringify(data) : undefined
  };

  const response = await fetch(`${API_URL}/${endpoint}`, config);

  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }

  return response.json();
}
```

### Offline Support
```typescript
// offlineManager.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import NetInfo from '@react-native-community/netinfo';

const PENDING_ACTIONS_KEY = 'PENDING_API_ACTIONS';

interface PendingAction {
  id: string;
  endpoint: string;
  method: string;
  data: any;
  timestamp: number;
}

export async function savePendingAction(action: Omit<PendingAction, 'id' | 'timestamp'>) {
  const pendingActionsString = await AsyncStorage.getItem(PENDING_ACTIONS_KEY);
  const pendingActions = pendingActionsString ? JSON.parse(pendingActionsString) : [];

  const newAction: PendingAction = {
    ...action,
    id: Date.now().toString(),
    timestamp: Date.now()
  };

  pendingActions.push(newAction);
  await AsyncStorage.setItem(PENDING_ACTIONS_KEY, JSON.stringify(pendingActions));
}

export async function processPendingActions(apiCallFunction: Function) {
  const isConnected = await NetInfo.fetch().then(state => state.isConnected);

  if (!isConnected) return;

  const pendingActionsString = await AsyncStorage.getItem(PENDING_ACTIONS_KEY);
  if (!pendingActionsString) return;

  const pendingActions: PendingAction[] = JSON.parse(pendingActionsString);
  const failedActions: PendingAction[] = [];

  for (const action of pendingActions) {
    try {
      await apiCallFunction({
        endpoint: action.endpoint,
        method: action.method,
        data: action.data
      });
    } catch (error) {
      failedActions.push(action);
    }
  }

  await AsyncStorage.setItem(PENDING_ACTIONS_KEY, JSON.stringify(failedActions));
}
```

## 3. Preparing for App Store Deployment

### Android Preparation
1. Create app icon assets
2. Update `android/app/build.gradle` with app version
3. Create signing configuration in gradle
4. Generate signed APK/AAB:
   ```
   cd android
   ./gradlew bundleRelease
   ```

### iOS Preparation
1. Create app icon and launch screen
2. Configure `info.plist` with necessary permissions
3. Set version and build number in Xcode
4. Archive app for distribution:
   - Open project in Xcode
   - Select Generic iOS Device as build target
   - Select Product > Archive

## 4. Publishing to App Stores

### Google Play Store
1. Create Store Listing:
   - App name, description, and promo text
   - Screenshots (phone, tablet)
   - Feature graphic and promo video (optional)

2. Upload AAB (Android App Bundle):
   ```
   cd android && ./gradlew bundleRelease
   ```

3. Set up pricing and distribution
4. Complete content rating questionnaire
5. Set up Internal/Alpha/Beta testing tracks before production release

### Apple App Store
1. Create App Store listing in App Store Connect:
   - App name, description, keywords
   - Screenshots for various device sizes
   - App preview videos (optional)

2. Upload build through Xcode or Application Loader
3. Configure pricing and availability
4. Complete app review information
5. Submit for App Review

## 5. Post-Launch Maintenance
1. Monitor crash reports and user feedback
2. Plan regular updates (feature, maintenance, security)
3. A/B testing for new features
4. Push notification campaigns
5. Analytics tracking to improve user experience


Future Updates:
1. add payment Integration with freemium plans
2. the utimate sloth mode (auto everything)
3. improve custom_maker
4. "We have an application that generates videos using a multi-step process (content generation,
script parsing, media rendering, etc.). Currently, the system handles video generation sequentially
and updates the UI with approximated remaining time values. We need recommendations to handle edge cases
and scalability for up to 1000 concurrent users without changing the core functionality or the UI.

Please provide guidance and example implementations for the following enhancements:

Queue System:

Propose a job queue mechanism (e.g. using Celery or another Node/Python queue) to process video generation
tasks asynchronously.
Explain how to decouple API request handling from background processing to avoid blocking and timeouts.
Redis Integration:

Suggest how to integrate Redis for task queuing, caching progress, and managing state across distributed workers.
Describe using Redis pub/sub or message brokers to inform the frontend about progress updates (like dynamic remaining time).
Edge Case Handling & Scalability:

Identify potential edge cases (e.g., tasks failing mid-process, long-running tasks, queue congestion)
and provide mitigation strategies.
Outline how to scale the system horizontally (e.g., using container orchestration) and monitor worker performance.
Provide ideas on dynamically calculating and displaying remaining processing time more accurately based on real-time
metrics without modifying existing UI components.
Ensure all recommendations improve the robustness, fault tolerance, and performance under high load while
 preserving the core functionalities.
Please include example code snippets, potential Redis and queue configuration settings, and any best practices that could be applied in
both the backend and frontend without altering the user interface."

5.improve the remaining time in processing page to be realtime

# LAZY CREATOR APP: STEP-BY-STEP DEPLOYMENT GUIDE

## PREPARATION AND INITIAL SETUP

### STEP 1: Ensure Prerequisites
1. Confirm you have:
   - GCP account with billing enabled
   - gcloud CLI installed on your computer
   - Docker installed on your computer

2. Login to gcloud if not already logged in:
   ```bash
   gcloud auth login
   ```

3. Set your project ID:
   ```bash
   gcloud config set project YOUR_PROJECT_ID
   ```

### STEP 2: Set Up MongoDB Atlas
1. Log in to your MongoDB Atlas account at https://cloud.mongodb.com/
2. Create a new cluster if you don't already have one (M0 free tier is fine for starting)
3. Under "Security" > "Database Access", create a database user with read/write permissions
4. Under "Security" > "Network Access", add your current IP address to access the database
5. Under "Network Access", click "Add IP Address" and enter "0.0.0.0/0" temporarily (you'll restrict this later)
6. On the cluster view, click "Connect" > "Connect your application" and copy the connection string
7. Replace <password> in the connection string with your actual password

### STEP 3: Set Up GCP Secret Manager
1. Enable the Secret Manager API:
   ```bash
   gcloud services enable secretmanager.googleapis.com
   ```

2. Create secrets for all sensitive values:
   ```bash
   # Create MongoDB URI secret
   echo -n "mongodb+srv://username:password@cluster.mongodb.net/lazy-creator?retryWrites=true&w=majority" | \
   gcloud secrets create mongodb-uri --data-file=-

   # Create other secrets
   echo -n "YOUR_NEWS_API_KEY" | gcloud secrets create news-api-key --data-file=-
   echo -n "YOUR_PEXELS_API_KEY" | gcloud secrets create pexels-api-key --data-file=-
   echo -n "YOUR_PIXABAY_API_KEY" | gcloud secrets create pixabay-api-key --data-file=-
   echo -n "YOUR_SECRET_KEY_FOR_JWT" | gcloud secrets create secret-key --data-file=-
   ```

3. Verify your secrets were created:
   ```bash
   gcloud secrets list
   ```

### STEP 4: Set Up Cloud Storage Buckets
1. Create two storage buckets:
   ```bash
   gcloud storage buckets create gs://lazycreator-media --location=us-central1
   gcloud storage buckets create gs://lazycreator-uploads --location=us-central1
   ```

### STEP 5: Set Up or Verify Service Account
1. List your existing service accounts:
   ```bash
   gcloud iam service-accounts list
   ```

2. If you need to create a new service account:
   ```bash
   gcloud iam service-accounts create lazy-creator-sa \
     --description="Service account for Lazy Creator app" \
     --display-name="Lazy Creator SA"
   ```

3. Grant necessary permissions to your service account:
   ```bash
   # Replace YOUR_PROJECT_ID with your actual project ID
   # Replace SERVICE_ACCOUNT_EMAIL with your service account email (e.g., lazy-creator-sa@YOUR_PROJECT_ID.iam.gserviceaccount.com)

   PROJECT_ID=YOUR_PROJECT_ID
   SA_EMAIL=SERVICE_ACCOUNT_EMAIL

   # Cloud Run admin
   gcloud projects add-iam-policy-binding $PROJECT_ID \
     --member="serviceAccount:$SA_EMAIL" \
     --role="roles/run.admin"

   # Storage admin
   gcloud projects add-iam-policy-binding $PROJECT_ID \
     --member="serviceAccount:$SA_EMAIL" \
     --role="roles/storage.admin"

   # Secret Manager accessor
   gcloud projects add-iam-policy-binding $PROJECT_ID \
     --member="serviceAccount:$SA_EMAIL" \
     --role="roles/secretmanager.secretAccessor"

   # Logging writer
   gcloud projects add-iam-policy-binding $PROJECT_ID \
     --member="serviceAccount:$SA_EMAIL" \
     --role="roles/logging.logWriter"
   ```

## DEPLOYMENT STEPS

### STEP 6: Deploy Backend Service
1. Enable required APIs:
   ```bash
   gcloud services enable cloudbuild.googleapis.com run.googleapis.com
   ```

2. Navigate to the backend directory and build the Docker image:
   ```bash
   cd backend

   # Set variables for easier command building
   PROJECT_ID=YOUR_PROJECT_ID
   REGION=us-central1  # Choose your preferred region
   SA_EMAIL=YOUR_SERVICE_ACCOUNT_EMAIL  # e.g., lazy-creator-sa@project-id.iam.gserviceaccount.com

   # Build the Docker image using Cloud Build
   gcloud builds submit --tag gcr.io/$PROJECT_ID/lazy-creator-backend
   ```

3. Deploy the backend to Cloud Run:
   ```bash
   gcloud run deploy backend \
     --image gcr.io/$PROJECT_ID/lazy-creator-backend \
     --platform managed \
     --allow-unauthenticated \
     --memory 2Gi \
     --cpu 2 \
     --region $REGION \
     --service-account=$SA_EMAIL \
     --set-env-vars="DEBUG=False,FRONTEND_URL=https://lazycreator.in,MONGODB_DB_NAME=lazy-creator,MEDIA_BUCKET=lazycreator-media,UPLOADS_BUCKET=lazycreator-uploads" \
     --update-secrets="MONGODB_URI=mongodb-uri:latest,NEWS_API_KEY=news-api-key:latest,PEXELS_API_KEY=pexels-api-key:latest,PIXABAY_API_KEY=pixabay-api-key:latest,SECRET_KEY=secret-key:latest"
   ```

4. After deployment, note the backend URL provided in the output:
   ```bash
   # Save the backend URL to a variable for later use
   BACKEND_URL=$(gcloud run services describe backend --platform managed --region $REGION --format="value(status.url)")
   echo "Backend URL: $BACKEND_URL"
   ```

### STEP 7: Deploy Frontend Service
1. Navigate to the frontend directory and build the Docker image:
   ```bash
   cd ../frontend  # Assuming you're in the backend directory

   # Build the frontend Docker image
   gcloud builds submit --tag gcr.io/$PROJECT_ID/lazy-creator-frontend
   ```

2. Deploy the frontend to Cloud Run:
   ```bash
   gcloud run deploy frontend \
     --image gcr.io/$PROJECT_ID/lazy-creator-frontend \
     --platform managed \
     --allow-unauthenticated \
     --memory 1Gi \
     --region $REGION \
     --service-account=$SA_EMAIL
   ```

3. After deployment, note the frontend URL:
   ```bash
   FRONTEND_URL=$(gcloud run services describe frontend --platform managed --region $REGION --format="value(status.url)")
   echo "Frontend URL: $FRONTEND_URL"
   ```

### STEP 8: Test Deployment
1. Test the backend health endpoint:
   ```bash
   curl $BACKEND_URL/api/health
   ```

2. Visit the frontend URL in your browser to test the UI:
   ```
   Open in browser: $FRONTEND_URL
   ```

## DOMAIN SETUP (Optional - If you want to use your custom domain)

### STEP 9: Set Up Load Balancer for Custom Domain
1. Create a global IP address:
   ```bash
   gcloud compute addresses create lazy-creator-ip --global
   ```

2. Get the created IP address:
   ```bash
   LB_IP=$(gcloud compute addresses describe lazy-creator-ip --global --format="get(address)")
   echo "Load Balancer IP: $LB_IP"
   ```

3. Create an SSL certificate:
   ```bash
   gcloud compute ssl-certificates create lazycreator-cert \
     --domains=lazycreator.in,www.lazycreator.in
   ```

4. Create backend services:
   ```bash
   # For frontend
   gcloud compute backend-services create lazy-creator-frontend \
     --global \
     --load-balancing-scheme=EXTERNAL

   # For backend
   gcloud compute backend-services create lazy-creator-backend \
     --global \
     --load-balancing-scheme=EXTERNAL
   ```

5. Create Network Endpoint Groups (NEGs):
   ```bash
   # For frontend
   gcloud compute network-endpoint-groups create lazy-creator-frontend-neg \
     --region=$REGION \
     --network-endpoint-type=SERVERLESS \
     --cloud-run-service=frontend

   # For backend
   gcloud compute network-endpoint-groups create lazy-creator-backend-neg \
     --region=$REGION \
     --network-endpoint-type=SERVERLESS \
     --cloud-run-service=backend
   ```

6. Add NEGs to backend services:
   ```bash
   # For frontend
   gcloud compute backend-services add-backend lazy-creator-frontend \
     --global \
     --network-endpoint-group=lb-frontend-neg \
     --network-endpoint-group-region=$REGION

   # For backend
   gcloud compute backend-services add-backend lazy-creator-backend \
     --global \
     --network-endpoint-group=lazy-creator-backend-neg \
     --network-endpoint-group-region=$REGION
   ```

7. Create URL map and set up path routing:
   ```bash
   gcloud compute url-maps create lazy-creator-url-map \
     --default-service=lazy-creator-frontend

   # Add backend API path matcher
   gcloud compute url-maps add-path-matcher lazy-creator-url-map \
     --path-matcher-name=backend-paths \
     --default-service=lazy-creator-frontend \
     --path-rules="/api/*=lazy-creator-backend"
   ```

8. Create HTTPS proxy with the certificate:
   ```bash
   gcloud compute target-https-proxies create lazy-creator-https-proxy \
     --url-map=lazy-creator-url-map \
     --ssl-certificates=lazycreator-cert
   ```

9. Create forwarding rule:
   ```bash
   gcloud compute forwarding-rules create lazy-creator-https-rule \
     --global \
     --target-https-proxy=lazy-creator-https-proxy \
     --address=lazy-creator-ip \
     --ports=443
   ```

### STEP 10: Update DNS Records
1. Login to your GoDaddy account
2. Navigate to DNS management for lazycreator.in
3. Add the following DNS records:
   - A record: @ → [LB_IP] (the IP from Step 9.2)
   - CNAME record: www → lazycreator.in

4. Wait for DNS propagation (can take 24-48 hours)

### STEP 11: Verify Domain Setup
1. After DNS propagation, test your domain:
   ```
   https://lazycreator.in
   https://lazycreator.in/api/health
   ```

## ADDITIONAL SECURITY STEPS

### STEP 12: Secure MongoDB Access
1. Go back to MongoDB Atlas
2. Under "Network Access", delete the temporary "0.0.0.0/0" IP entry
3. Add the IP ranges for Google Cloud:
   - For us-central1: 34.66.0.0/15, 34.72.0.0/15
   - (Look up IP ranges for your specific GCP region if different)

### STEP 13: Set Up Monitoring and Logging
1. Enable Cloud Monitoring:
   ```bash
   gcloud services enable monitoring.googleapis.com
   ```

2. View logs for your services:
   ```bash
   # Backend logs
   gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=backend" --limit=10

   # Frontend logs
   gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=frontend" --limit=10
   ```

## TROUBLESHOOTING

If you encounter issues, check these common problems:

1. **MongoDB Connection Issues**:
   - Verify your MongoDB Atlas connection string
   - Check network access settings in MongoDB Atlas
   - Ensure the database user has correct permissions

2. **Service Account Issues**:
   - Verify service account has all required permissions
   - Check if secrets are accessible to the service account

3. **Domain Issues**:
   - Check DNS propagation with `nslookup lazycreator.in`
   - Verify load balancer is properly configured

For support, check GCP documentation or contact support.

## COMPLETED DEPLOYMENT CHECKLIST
- [ ] MongoDB Atlas cluster set up
- [ ] GCP Secrets created for sensitive variables
- [ ] Storage buckets created
- [ ] Backend deployed to Cloud Run
- [ ] Frontend deployed to Cloud Run
- [ ] Initial testing completed with direct URLs
- [ ] Load balancer set up (if using custom domain)
- [ ] DNS records updated (if using custom domain)
- [ ] Final testing with custom domain
- [ ] MongoDB network access restricted
- [ ] Monitoring set up
